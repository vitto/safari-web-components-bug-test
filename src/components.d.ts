/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MdsInputEventDetail } from "./components/mds-input/mds-input";
export { MdsInputEventDetail } from "./components/mds-input/mds-input";
export namespace Components {
    interface MdsInput {
        /**
          * Specifies whether the element should have autocomplete enabled
         */
        "autocomplete"?: string;
        /**
          * Specifies that the element should automatically get focus when the page loads
         */
        "autofocus": boolean;
        /**
          * Specifies if the spinner icon is shown, replacing the icon if present
         */
        "await": boolean;
        /**
          * Specifies the label for control button decrease for component when type is number
         */
        "controlDecreaseLabel"?: string;
        /**
          * Specifies the label for control button increase for component when type is number
         */
        "controlIncreaseLabel"?: string;
        /**
          * Specifies the icon type of the counter button when the input type is set to `number`
         */
        "controlsIcon"?: string;
        /**
          * Specifies the layout of the counter button when the input type is set to `number`
         */
        "controlsLayout"?: string;
        /**
          * A list of search terms to be searched from the input field, it should be used with type="search" input.
         */
        "datalist"?: string[];
        /**
          * If true, the element is displayed as disabled
         */
        "disabled"?: boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement | HTMLTextAreaElement>;
        /**
          * An icon displayed at the right of the input
         */
        "icon"?: string;
        /**
          * Specifies the maximum value use it with input type="number" or type="date" Example: max="180", max="2046-12-04"
         */
        "max"?: string;
        /**
          * Specifies the maximum number of characters allowed in an element use it with input type="number"
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum value use it with input type="number" or type="date" Example: min="-3", min="1988-04-15"
         */
        "min"?: string | number;
        /**
          * Specifies the minimum number of characters allowed in an element use it with input type="number"
         */
        "minlength"?: number;
        /**
          * Is needed to reference the form data after the form is submitted
         */
        "name"?: string;
        /**
          * Specifies a regular expression that element\'s value is checked against
         */
        "pattern"?: string;
        /**
          * Specifies a short hint that describes the expected value of the element
         */
        "placeholder": string;
        /**
          * Specifies that the element is read-only
         */
        "readonly"?: boolean;
        /**
          * Specifies that the element must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Sets focus on the specified `my-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the interval between legal numbers in an input field
         */
        "step"?: string;
        /**
          * Sets the word(s) of the tip of the input field
         */
        "tip"?: string;
        /**
          * Specifies the type of input element
         */
        "type"?: string;
        /**
          * Specifies the typography of input element
         */
        "typography": string;
        /**
          * Specifies the value of the input element
         */
        "value"?: string;
        /**
          * Sets the variant of the input field
         */
        "variant"?: string;
    }
}
export interface MdsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMdsInputElement;
}
declare global {
    interface HTMLMdsInputElementEventMap {
        "mdsInputChange": MdsInputEventDetail;
        "mdsInputKeydown": KeyboardEvent;
        "mdsInputBlur": void;
        "mdsInputFocus": void;
    }
    interface HTMLMdsInputElement extends Components.MdsInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMdsInputElementEventMap>(type: K, listener: (this: HTMLMdsInputElement, ev: MdsInputCustomEvent<HTMLMdsInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMdsInputElementEventMap>(type: K, listener: (this: HTMLMdsInputElement, ev: MdsInputCustomEvent<HTMLMdsInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMdsInputElement: {
        prototype: HTMLMdsInputElement;
        new (): HTMLMdsInputElement;
    };
    interface HTMLElementTagNameMap {
        "mds-input": HTMLMdsInputElement;
    }
}
declare namespace LocalJSX {
    interface MdsInput {
        /**
          * Specifies whether the element should have autocomplete enabled
         */
        "autocomplete"?: string;
        /**
          * Specifies that the element should automatically get focus when the page loads
         */
        "autofocus"?: boolean;
        /**
          * Specifies if the spinner icon is shown, replacing the icon if present
         */
        "await"?: boolean;
        /**
          * Specifies the label for control button decrease for component when type is number
         */
        "controlDecreaseLabel"?: string;
        /**
          * Specifies the label for control button increase for component when type is number
         */
        "controlIncreaseLabel"?: string;
        /**
          * Specifies the icon type of the counter button when the input type is set to `number`
         */
        "controlsIcon"?: string;
        /**
          * Specifies the layout of the counter button when the input type is set to `number`
         */
        "controlsLayout"?: string;
        /**
          * A list of search terms to be searched from the input field, it should be used with type="search" input.
         */
        "datalist"?: string[];
        /**
          * If true, the element is displayed as disabled
         */
        "disabled"?: boolean;
        /**
          * An icon displayed at the right of the input
         */
        "icon"?: string;
        /**
          * Specifies the maximum value use it with input type="number" or type="date" Example: max="180", max="2046-12-04"
         */
        "max"?: string;
        /**
          * Specifies the maximum number of characters allowed in an element use it with input type="number"
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum value use it with input type="number" or type="date" Example: min="-3", min="1988-04-15"
         */
        "min"?: string | number;
        /**
          * Specifies the minimum number of characters allowed in an element use it with input type="number"
         */
        "minlength"?: number;
        /**
          * Is needed to reference the form data after the form is submitted
         */
        "name"?: string;
        /**
          * Emits a void event when input element is blurred
         */
        "onMdsInputBlur"?: (event: MdsInputCustomEvent<void>) => void;
        /**
          * Emits an InputChangeEventDetail when the value of the input element changes
         */
        "onMdsInputChange"?: (event: MdsInputCustomEvent<MdsInputEventDetail>) => void;
        /**
          * Emits a void event when input element is focused
         */
        "onMdsInputFocus"?: (event: MdsInputCustomEvent<void>) => void;
        /**
          * Emits a KeyboardEvent when a keyboard key is pressed on the focused input element
         */
        "onMdsInputKeydown"?: (event: MdsInputCustomEvent<KeyboardEvent>) => void;
        /**
          * Specifies a regular expression that element\'s value is checked against
         */
        "pattern"?: string;
        /**
          * Specifies a short hint that describes the expected value of the element
         */
        "placeholder"?: string;
        /**
          * Specifies that the element is read-only
         */
        "readonly"?: boolean;
        /**
          * Specifies that the element must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the interval between legal numbers in an input field
         */
        "step"?: string;
        /**
          * Sets the word(s) of the tip of the input field
         */
        "tip"?: string;
        /**
          * Specifies the type of input element
         */
        "type"?: string;
        /**
          * Specifies the typography of input element
         */
        "typography"?: string;
        /**
          * Specifies the value of the input element
         */
        "value"?: string;
        /**
          * Sets the variant of the input field
         */
        "variant"?: string;
    }
    interface IntrinsicElements {
        "mds-input": MdsInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mds-input": LocalJSX.MdsInput & JSXBase.HTMLAttributes<HTMLMdsInputElement>;
        }
    }
}
