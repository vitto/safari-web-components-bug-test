{"file":"mds-input.entry.esm.js","mappings":"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","names":[],"sources":["src/components/mds-input/mds-input.css?tag=mds-input&encapsulation=shadow","src/components/mds-input/mds-input.tsx"],"sourcesContent":["@import '~@maggioli-design-system/styles/dist/tailwind/typography.css';\n@tailwind components;\n@tailwind utilities;\n\n/**\n * @prop --mds-input-background: Sets the background-color of the component\n * @prop --mds-input-icon-color: Sets the icon color of the component\n * @prop --mds-input-ring: Sets the box-shadow of the component's input\n * @prop --mds-input-shadow: Sets the box-shadow of the component's input\n * @prop --mds-input-textarea-field-sizing: Sets the height of the textarea automatically, this is an EXPERIMENTAL css property, so it couldn't work in every browser\n * @prop --mds-input-textarea-max-height: Sets the `max-height` of the component when attribute `type` is set to `textarea`\n * @prop --mds-input-textarea-min-height: Sets the `min-height` of the component when attribute `type` is set to `textarea`\n * @prop --mds-input-tip-background: Sets the background color of the tip message at the bottom right of the component\n * @prop --mds-input-variant-color: Sets the variant colors of the component\n */\n\n:host {\n\n  --mds-input-background: theme('colors.tone-neutral');\n  --mds-input-icon-color: var(--mds-input-variant-color);\n  --mds-input-tip-background: 84 84 84;\n  --mds-input-ring: 0 0 0 1px rgb(var(--mds-input-variant-color) / 0.1);\n  --mds-input-shadow: 0 1px 3px 0 rgb(var(--mds-input-variant-color) / 0.1), 0 1px 2px 0 rgb(var(--mds-input-variant-color) / 0.06);\n  --mds-input-variant-color: 0 0 0;\n  --mds-input-controls-color: theme('colors.variant-primary-03');\n  --mds-input-controls-border: 2px solid theme('colors.tone-neutral-09');\n  --mds-input-textarea-min-height: theme('size.2400');\n  --mds-input-textarea-max-height: theme('size.6400');\n  --mds-input-textarea-field-sizing: content;\n\n  @apply\n    gap-200\n    text-info-detail;\n\n  container-type: inline-size;\n  display: flex;\n  position: relative;\n}\n\n:host( [typography=\"detail\"] ) .input {\n  @apply text-info-detail;\n}\n\n:host( [typography=\"snippet\"] ) .input {\n  @apply text-code-snippet;\n}\n\n.input {\n\n  @apply\n    duration-300\n    ease-out-expo\n    m-0\n    px-400\n    py-300\n    rounded-lg\n    text-info-detail;\n\n    background-color: var(--mds-input-background);\n    border: 0;\n    box-shadow: var(--mds-input-ring), var(--mds-input-shadow);\n    box-sizing: border-box;\n    color: theme('colors.tone-neutral-02');\n    min-height: 3rem;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    transition-property: background-color, border-color, box-shadow, color, fill, margin, opacity, padding, transform;\n    width: 100%;\n}\n\n.input::placeholder {\n  color: theme('colors.tone-neutral-04');\n}\n\n.input::-webkit-outer-spin-button,\n.input::-webkit-inner-spin-button {\n  appearance: none;\n  display: none;\n  margin: 0;\n}\n\ntextarea.input {\n  @apply\n    resize-y\n    rounded-br-none;\n\n  field-sizing: var(--mds-input-textarea-field-sizing);\n  max-height: var(--mds-input-textarea-max-height);\n  min-height: var(--mds-input-textarea-min-height);\n  overflow: auto\n}\n\n.input:focus {\n  @apply outline-none;\n\n  --mds-input-ring: 0 0 0 3px rgb(var(--mds-input-variant-color) / 1);\n  --mds-input-shadow: 0 4px 6px 3px rgb(var(--mds-input-variant-color) / 0.1), 0 2px 4px -1px rgb(var(--mds-input-variant-color) / 0.06);\n\n}\n\n.input:disabled {\n  background-color: theme('colors.tone-neutral-10');\n}\n\n.input:disabled,\n.input:disabled::placeholder {\n  color: theme('colors.tone-neutral-05');\n}\n\n.input.has-icon {\n  @apply pl-1100;\n}\n\n\n.await,\n.icon {\n  @apply\n    left-300\n    top-300;\n\n  fill: rgb(var(--mds-input-icon-color));\n  position: absolute;\n}\n\n.await {\n  color: rgb(var(--mds-input-icon-color));\n  height: 24px;\n  width: 24px;\n}\n\n.counter {\n  border-left: var(--mds-input-controls-border);\n  display: flex;\n  flex-direction: column;\n  gap: 0;\n  position: absolute;\n  right: 0;\n}\n\n.counter-button {\n\n  @apply\n    h-600\n    rounded-lg\n    w-700;\n\n  --mds-button-background: transparent;\n\n  border: 0;\n  fill: var(--mds-input-controls-color);\n  min-height: 0;\n  padding: 0;\n}\n\n.counter-button:hover {\n\n  --mds-button-background: theme('colors.tone-neutral-09');\n}\n\n.counter .counter-button:first-child {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.counter .counter-button:last-child {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.counter-button--horizontal {\n  @apply\n    h-1200\n    w-1200;\n\n  bottom: 0;\n  position: absolute;\n  top: 0;\n}\n\n.counter-button--decrease {\n  border-bottom-right-radius: 0;\n  border-right: var(--mds-input-controls-border);\n  border-top-right-radius: 0;\n  left: 0;\n}\n\n.counter-button--increase {\n  border-bottom-left-radius: 0;\n  border-left: var(--mds-input-controls-border);\n  border-top-left-radius: 0;\n  right: 0;\n}\n\n.password-toggle-button {\n  @apply\n    top-150\n    right-150;\n\n  fill: var(--mds-input-controls-color);\n  position: absolute;\n}\n\n:host( [type=\"number\"] ) .input {\n  @apply pr-800;\n}\n\n:host( [type=\"number\"][controls-layout=\"horizontal\"] ) .input {\n  @apply px-1400;\n\n  text-align: center;\n}\n\n:host( [type=\"number\"][controls-layout=\"horizontal\"][icon] ) .input {\n  @apply pl-2400;\n\n  text-align: left;\n}\n\n\n:host( [type=\"number\"][controls-layout=\"horizontal\"] ) .icon {\n  @apply left-1500;\n}\n\n:host( [type=\"password\"]) .input {\n  @apply pr-1000;\n}\n\n:host( [type=\"password\"]) .input[type=\"password\"]:not(:placeholder-shown) {\n  font-size: theme('fontSize.4xl');\n  max-height: 3rem;\n}\n\n:host( [type=\"password\"]) .input[type=\"text\"]:not(:placeholder-shown) {\n  @apply text-code-snippet;\n}\n\n@import './css/mds-input-variant.css';\n@import './css/mds-input-pref-animation.css';\n@import './css/mds-input-pref-theme.css';\n@import './css/mds-input-pref-contrast.css';\n\n@container (max-width: 210px) {\n  :host .tip__content,\n  :host(:focus-within) .tip__content {\n    grid-template-columns: 0fr;\n    opacity: 0;\n  }\n\n  :host .tip {\n    padding-left: 0;\n    padding-right: 0;\n  }\n\n  :host {\n\n    --mds-input-background: theme('colors.variant-primary-07');\n  }\n}\n\n@import '../../tailwind/fouc.css';\n","import {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n  h,\n} from \"@stencil/core\";\n/*\n * @part field - Selects the native input field used by the component\n * @part counter-button-decrease - Selects the button used to decrese the input value\n * @part counter-button-increase - Selects the button used to increse the input value\n * @part password-toggle-button - Selects the button used to show or hide password\n */\n\nexport interface MdsInputEventDetail {\n  value?: File | string | FormData | null;\n}\n\nexport interface MdsInputInterface {\n  autocomplete?: string;\n  autofocus?: boolean;\n  controlsIcon?: string;\n  controlsLayout?: string;\n  datalist?: string[];\n  disabled?: boolean;\n  icon?: string;\n  max?: string;\n  maxLength?: number;\n  min?: string;\n  minLength?: number;\n  name?: string;\n  pattern?: string;\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n  step?: string;\n  tabindex?: number;\n  tip?: string;\n  type: string;\n  typography?: string;\n  value?: string;\n  variant?: string;\n}\n\n@Component({\n  tag: \"mds-input\",\n  styleUrl: \"mds-input.css\",\n  formAssociated: true,\n  shadow: true,\n})\nexport class MdsInput {\n  private nativeInput?: HTMLInputElement | HTMLTextAreaElement;\n  private tabindex?: number;\n  @Element() el: HTMLMdsInputElement;\n  @State() hasFocus = false;\n  @State() language: string;\n  @State() isPasswordVisible = false;\n\n  @AttachInternals() internals: ElementInternals;\n\n  /**\n   * Specifies whether the element should have autocomplete enabled\n   */\n  @Prop({ reflect: true }) readonly autocomplete?: string = \"off\";\n\n  /**\n   * Specifies that the element should automatically get focus when the page loads\n   */\n  @Prop({ reflect: true }) readonly autofocus: boolean = false;\n\n  /**\n   * Specifies if the spinner icon is shown, replacing the icon if present\n   */\n  @Prop({ reflect: true }) readonly await: boolean = false;\n\n  /**\n   * Specifies the layout of the counter button when the input type is set to `number`\n   */\n  @Prop({ reflect: true }) readonly controlsLayout?: string = \"vertical\";\n\n  /**\n   * Specifies the icon type of the counter button when the input type is set to `number`\n   */\n  @Prop({ reflect: true }) readonly controlsIcon?: string = \"arrow\";\n\n  /**\n   * Specifies the label for control button increase for component when type is number\n   */\n  @Prop({ reflect: true }) readonly controlIncreaseLabel?: string = \"Aumenta\";\n\n  /**\n   * Specifies the label for control button decrease for component when type is number\n   */\n  @Prop({ reflect: true }) readonly controlDecreaseLabel?: string = \"Riduci\";\n\n  /**\n   * A list of search terms to be searched from the input field,\n   * it should be used with type=\"search\" input.\n   */\n  @Prop() readonly datalist?: string[];\n\n  /**\n   * If true, the element is displayed as disabled\n   */\n  @Prop({ reflect: true }) readonly disabled?: boolean = false;\n\n  /**\n   * An icon displayed at the right of the input\n   */\n  @Prop({ reflect: true }) readonly icon?: string;\n\n  /**\n   * Specifies the maximum value\n   * use it with input type=\"number\" or type=\"date\"\n   * Example: max=\"180\", max=\"2046-12-04\"\n   */\n  @Prop({ reflect: true }) readonly max?: string;\n\n  /**\n   * Specifies the maximum number of characters allowed in an element\n   * use it with input type=\"number\"\n   */\n  @Prop({ reflect: true }) readonly maxlength?: number;\n\n  /**\n   * Specifies the minimum value\n   * use it with input type=\"number\" or type=\"date\"\n   * Example: min=\"-3\", min=\"1988-04-15\"\n   */\n  @Prop({ reflect: true }) readonly min?: string | number;\n\n  /**\n   * Specifies the minimum number of characters allowed in an element\n   * use it with input type=\"number\"\n   */\n  @Prop({ reflect: true }) readonly minlength?: number;\n\n  /**\n   * Is needed to reference the form data after the form is submitted\n   */\n  @Prop({ reflect: true }) readonly name?: string;\n\n  /**\n   * Specifies a regular expression that element\\'s value is checked against\n   */\n  @Prop({ reflect: true }) readonly pattern?: string;\n\n  /**\n   * Specifies a short hint that describes the expected value of the element\n   */\n  @Prop({ reflect: true }) readonly placeholder: string = \"\";\n\n  /**\n   * Specifies that the element is read-only\n   */\n  @Prop({ reflect: true }) readonly readonly?: boolean = false;\n\n  /**\n   * Specifies that the element must be filled out before submitting the form\n   */\n  @Prop({ reflect: true }) readonly required?: boolean = false;\n\n  /**\n   * Sets the variant of the input field\n   */\n  @Prop({ reflect: true }) readonly variant?: string;\n\n  /**\n   * Sets the word(s) of the tip of the input field\n   */\n  @Prop({ reflect: true }) readonly tip?: string;\n\n  /**\n   * Specifies the interval between legal numbers in an input field\n   */\n  @Prop({ reflect: true }) readonly step?: string;\n\n  /**\n   * Specifies the type of input element\n   */\n  @Prop({ reflect: true }) readonly type?: string = \"text\";\n\n  /**\n   * Specifies the typography of input element\n   */\n  @Prop({ reflect: true }) typography: string = \"detail\";\n\n  /**\n   * Specifies the value of the input element\n   */\n  @Prop({ mutable: true, reflect: true }) value?: string = \"\";\n\n  /**\n   * Emits an InputChangeEventDetail when the value of the input element changes\n   */\n  @Event({ eventName: \"mdsInputChange\" })\n  changeEvent!: EventEmitter<MdsInputEventDetail>;\n\n  /**\n   * Emits a KeyboardEvent when a keyboard key is pressed on the focused input element\n   */\n  @Event({ eventName: \"mdsInputKeydown\" })\n  keyDownEvent!: EventEmitter<KeyboardEvent>;\n\n  /**\n   * Emits a void event when input element is blurred\n   */\n  @Event({ eventName: \"mdsInputBlur\" }) blurEvent!: EventEmitter<void>;\n\n  /**\n   * Emits a void event when input element is focused\n   */\n  @Event({ eventName: \"mdsInputFocus\" }) focusEvent!: EventEmitter<void>;\n\n  formResetCallback(): void {\n    this.internals.setFormValue(\"\");\n  }\n\n  componentWillLoad(): void {\n    // If the mds-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // mds-input to avoid causing tabbing twice on the same element\n    if (this.el.hasAttribute(\"tabindex\")) {\n      const tabindex = this.el.getAttribute(\"tabindex\");\n      this.tabindex = tabindex !== null ? parseInt(tabindex) : undefined;\n      this.el.removeAttribute(\"tabindex\");\n    }\n    this.internals.setFormValue(this.value ?? null);\n  }\n\n  /**\n   * Emits the change event when the component value changes\n   */\n  @Watch(\"value\")\n  protected valueChanged(): void {\n    this.changeEvent.emit({ value: this.value });\n    this.internals.setFormValue(this.value ?? null);\n  }\n\n  @Watch(\"disabled\")\n  protected disabledChanged(newValue: boolean): void {\n    /**\n     * This is related to ALL disabled attributes set on Magma input components\n     * if solved, please check mds-button, mds-input, mds-input-*\n     * https://github.com/ionic-team/stencil/issues/5461\n     */\n    if (newValue) {\n      this.internals.setFormValue(null);\n    }\n  }\n\n  /**\n   * Sets focus on the specified `my-input`.\n   * Use this method instead\n   * of the global `input.focus()`.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  @Method()\n  getInputElement(): Promise<HTMLInputElement | HTMLTextAreaElement> {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return Promise.resolve(this.nativeInput!);\n  }\n\n  private onInput = (ev: InputEvent) => {\n    const input = ev.target as HTMLInputElement | HTMLTextAreaElement | false;\n    if (input) {\n      this.value = input.value;\n      this.internals.setFormValue(this.value);\n    }\n    this.keyDownEvent.emit(ev as Event as KeyboardEvent);\n  };\n\n  private onBlur = () => {\n    this.hasFocus = false;\n    this.blurEvent.emit();\n  };\n\n  private onFocus = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | HTMLTextAreaElement;\n    this.hasFocus = true;\n    this.focusEvent.emit();\n    if (this.readonly) {\n      // setTimeout to avoid Safari 14.1.2\n      // to unselect text when mouse is clicked slowly\n      setTimeout(() => {\n        input.select();\n      }, 10);\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <input\n          class=\"input\"\n          autoComplete={this.autocomplete}\n          autoFocus={this.autofocus}\n          disabled={this.disabled}\n          max={this.max}\n          maxLength={this.maxlength}\n          min={this.min}\n          minLength={this.minlength}\n          name={this.name}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          onInput={this.onInput}\n          pattern={this.pattern}\n          list={this.datalist && \"datalist\"}\n          part=\"field\"\n          placeholder={this.placeholder}\n          readOnly={this.readonly}\n          ref={(input) => (this.nativeInput = input)}\n          required={this.required}\n          step={this.step}\n          tabIndex={this.tabindex}\n          type={\n            this.type === \"password\" && this.isPasswordVisible\n              ? \"text\"\n              : this.type\n          }\n          value={this.value}\n        />\n      </Host>\n    );\n  }\n}\n"],"version":3}